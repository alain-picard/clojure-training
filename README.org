* clojure-training

A set of training materials prepared by Alain Picard for use in
training new clojure engineers at Blue Ridge Global.

* How to use this repo

*PREPARING*

Before each lesson, you /must/ come prepared by having
completed the necessary reading in each of the [[Lesson Plans]].
Make sure you keep an eye on this repo for new lesson plans,
and I will email you all each time a new one is added.

*DURING THE LESSONS*

This repo will periodically be updated with the code developed in
each lesson (when applicable) so you can download and play with the
examples I provide during the lessons.  Jack will also record the
lessons and make the videos available to you all.
After each lesson, the code will be added in a
file (or subdirectory) named =lesson-01=, =lesson-02= /etc./ (in the src subdir).

*AFTER THE LESSONS*

You will have to *fork* this repo so you can submit your *assignment solutions*
for review.

At the end of the lesson, I will sometimes set assignments
which I will detail in the [[Assignments]] section.  You should
attempt to answer these, placing your answers in the file
=/src/assignments/your_name//lesson_XX_answers.clj=.  When you
can cleanly load your file into a repl, raise a *pull request* for
me to review your code and merge it back into the main repo.  Thus,
you'll be able to view your colleague's solutions after I merge your
answers back into the main repo.

*REVIEWING ALAIN'S SOLUTIONS*

After the lessons, I will place my solutions in [[file:src/assignments/alain/][this directory]]. You
can peruse them at your leisure and compare against the code
you have written.

I will also place the code I present during the live coding
sessions [[file:src/clojure_training/][in here]]; the files beginning with live_XXX are the code
you see on the screen during the presentation; the files without the
live_ prefix are the preparatory material I produce (which is close,
but doesn't include the tangents I go off on during the lessons as
questions arise, /etc./)


* Material we plan to get through, eventually

 - [X] how to get help
 - [X] navigate sources
 - [X] structural editing
 - [X] using maps
 - [X] gotchas with =conj=
 - [X] destructuring
 - [X] sequences, lazy seqs
 - [X] lexical vs dynamic scoping
 - [X] reduce, functional idioms
 - [X] tracing, debugging
 - [X] writing tests
 - [X] Introduction to =leiningen=, dependency management,
       and finding and using libraries in clojure.
 - [X] The philosophical underpinning of state handling in clojure
 - [X] vars, atoms, refs, agents
 - [X] threads, futures, promises (concurrency primitives)
 - [X] The reader, it's syntax, and brief macro overview
 - [X] java interop, definining new types
 - [X] namespaces, the ns macro
 - [X] i/o
 - [X] writing (good!) docstrings
 - [X] metadata
 - [X] strings; regexes
 - [X] throw/catch, slingshot
 - [X] making simple HTTP requests
 - [X] multimethods
 - [ ] finding and using libraries
 - [ ] supply a list of recommended good libs.
 - [X] reader syntax
 - [X] Simple HTTP service: ring handlers, libraries
 - [X] core.async
 - [X] clojurescript
 - [ ] reframe
 - [ ] macros, threading macros

* Resources

We are going to make extensive use of the following:

 - The excellent online book: [[https://www.braveclojure.com/clojure-for-the-brave-and-true/][Clojure for the Brave and True]]
 - The [[https://github.com/functional-koans/clojure-koans][clojure koans]]
 - Many of the excellent at [[http://www.4clojure.com/problems][4clojure sample problems]]
 - In lessons 7 and 8, we will make use of [[git@github.com:alain-picard/simple-server-playground.git][this simple server]] playground.
 - In lessons 9 and 10, we will study [[git@github.com:alain-picard/simple-reagent-example.git][a bit of reagent]].
 - In lessons 11 and 12, we will build our own version of the [[https://www.nytimes.com/puzzles/spelling-bee][New York Times Spelling Bee]].
   Dr Picard's example solution can be [[https://github.com/alain-picard/re-frame-spelling-bee][found here]].

** Recommended external links 

   I urge you all to have a look at:
   - [[https://github.com/razum2um/awesome-clojure][Awesome clojure]]: a curated list
   - [[https://github.com/clojure-cookbook/clojure-cookbook.git][The clojure cookbook]]
   - [[https://figwheel.org/docs/][The *figwheel* documentation]]
   - [[https://cljdoc.org/d/reagent/reagent/1.0.0-alpha2/doc/documentation-index][The *reagent* documentation]]
   - [[https://github.com/day8/re-frame/][The *re-frame* documentation]]

* Lesson Plans
  - [[file:doc/lesson-01.org::*Introductory%20email][Lesson 1]] :: intro 
  - [[file:doc/lesson-02.org::*Lesson%20Goals][Lesson 2]] :: Functional Programming
  - [[file:doc/lesson-03.org::*Lesson%20Goals][Lesson 3]] :: More functional programming
  - [[file:doc/lesson-04.org::*Lesson%20Goals][Lesson 4]] :: References and identities, threads
  - [[file:doc/lesson-05.org::*Lesson%20Goals][Lesson 5]] :: Java interop, namespaces, i/o
  - [[file:doc/lesson-06.org::*Lesson%206:%20Clojure%20odds%20and%20ends][Lesson 6]] :: Clojure odds and ends
  - [[file:doc/lesson-07.org::*Lesson%207:%20A%20simple%20HTTP%20service][Lesson 7]] :: Building a simple HTTP service - Guess the right number!
  - [[file:doc/lesson-08.org][Lesson 8]] :: core.async and Dynamo DB
  - [[file:doc/lesson-09.org][Lesson 9]] :: Clojurescript
  - [[file:doc/lesson-10.org][Lesson 10]] :: Re-Frame
  - Lesson 11 :: The word puzzle (part 1)
  - Lesson 12 :: The word puzzle (part 2)
  - [[file:doc/lesson-summary.org][Course summary]]

* Assignments

** Lesson 2
   These are the assignment problems following Lesson 2.
   We will discuss your solutions and see Alain's solutions
   at the beginning of [[file:doc/lesson-03.org::*Lesson%20Goals][Lesson 3]].

   1. Implement your own version of =filter= using a loop form, then using reduce.
   2. Implement your own version of =update-in=
   3. Write a function which solves this problem:
      http://www.4clojure.com/problem/77
   4. Write a function which solves this problem:
      http://www.4clojure.com/problem/53

** Lesson 3

   1. Read chapters 9 and 10 of [[https://www.braveclojure.com/clojure-for-the-brave-and-true/][Clojure for the Brave and True]]

   2. Listen to the this online talk: [[https://www.infoq.com/presentations/Are-We-There-Yet-Rich-Hickey/][Are we there yet]]
      Take notes!  Listen carefully!  Rich is a very deep thinker.
      Pay particular attention to the analogy about the baseball game,
      when he discusses how state evolves and should be modelled.
      Can you see why clojure has =atoms= and =refs=, and immutable values,
      as its programming model?

   3. Try to solve the [[http://www.4clojure.com/problem/178][best poker hand]] problem.  This will require you
      to first solve problem 128, [[http://www.4clojure.com/problem/128][recognizing poker hands]].
      This is an excercise is structuring and factoring your code
      as cleanly as possible; pay close attention to your representation
      and clearly separate the parsing code from the evaluation code.
      See what reusable functions exist in recognizing all the various
      types of hands.

      Here I want you to think not simply in terms of learning clojure syntax;
      (you should have all the necessary tools to solve this already), but
      at the next level of sophistication; that is, worry about
      - choosing good names for functions and variables

      - representation of your data structures

      - clearly separating out functionality

      - making things as readable and understandable as you possibly can

      - write a test harness for your code.




** Lesson 4

   1. There are no koans dealing with multiprocessing (probably just
      too hard to write them!)  So we'll be doing the book excercises
      instead.
      Do the exercises at the end of chapter 9.

   2. Do the exercises at the end of chapter 10.  Note that in the
      second excercise, the URL shown is incorrect; it should be HTTPS,
      not http, thus:
     #+begin_src clojure
(slurp "https://www.braveclojure.com/random-quote")   
   #+end_src

   These exercises are longer and more challenging than the ones you have
   done so far.  Don't hesitate to reach out on the issues board!

** Lesson 5
 The assignments are now located in the lesson plan file.  See [[file:doc/lesson-05.org::*Assignments][Assignments]].



* Legalese

Copyright Â© 2020 Alain Picard Consulting.  

I wrote and assembled this for didactic purposes, and I'm perfectly
happy for anyone to use this as they see fit.

This program and the accompanying materials are made available under the
terms of the Eclipse Public License 2.0 which is available at
http://www.eclipse.org/legal/epl-2.0.

This Source Code may also be made available under the following Secondary
Licenses when the conditions for such availability set forth in the Eclipse
Public License, v. 2.0 are satisfied: GNU General Public License as published by
the Free Software Foundation, either version 2 of the License, or (at your
option) any later version, with the GNU Classpath Exception which is available
at https://www.gnu.org/software/classpath/license.html.



